The problem is most likely that on snow leopard, java opens in 64 bit mode, and then the tiger libraries which are 32 bit can't load.

build instructions:
export CXXFLAGS="-arch i386"
export CFLAGS="-mmacosx-version-min=10.4 -arch i386  -isysroot /Developer/SDKs/MacOSX10.4u.sdk"
export LDFLAGS=$CXXFLAGS

install automake, libtools

svn the latest ode

build it with autogen.sh, configure.sh, make (not make install?)

define JAVA_INCLUDE to the jdk include directory

add k to config.h in ode #define SIZE_MAX ((size_t)(-1)) 

Note: odejava.hpp and odejava.cxx will have to be modified slightly because of differences in ode; 
the includes need to be modified like so: 

ind odejava.cxx:
 #include <ode/ode.h>
// #include <ode/GeomTransformGroup.h>
// #include <../ode/src/dCylinder.h>
 #include <../ode/src/joints/joint.h>
 #include "odejava.hpp"

in odejava.h:

#include <ode/ode.h>
#include <ode/objects.h>
#include <joint.h> //(note, this works because joints folder is added to the include statement in the g++ calls below.)

in odejava.cxx:


SWIGEXPORT void JNICALL Java_org_odejava_ode_OdeJNI_dGeomTriMeshDataBuildSimple(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  dTriMeshDataID arg1 = (dTriMeshDataID) 0 ;
  dReal *arg2 = (dReal *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dTriMeshDataID *)&jarg1; 
  arg2 = *(dReal **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  dGeomTriMeshDataBuildSimple(arg1,(float const *)arg2,arg3,(const dTriIndex *)arg4,arg5);
}


SWIGEXPORT void JNICALL Java_org_odejava_ode_OdeJNI_dGeomTriMeshDataBuildSimple1(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  dTriMeshDataID arg1 = (dTriMeshDataID) 0 ;
  dReal *arg2 = (dReal *) 0 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(dTriMeshDataID *)&jarg1; 
  arg2 = *(dReal **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = (int)jarg5; 
  arg6 = *(int **)&jarg6; 
  dGeomTriMeshDataBuildSimple1(arg1,(float const *)arg2,arg3,(const dTriIndex *)arg4,arg5,(int const *)arg6);
}
the dgeomtrimeshdatabuildsimple lines need to have const dTriIndex *, as above, instead of const int *, at lines 2752 2772





cd to the src folder that opende and c are in,
call:

g++ $CFLAGS -fPIC -DHAVE_CONFIG_H -I../src/c -Iopende/include -O2 -fno-strict-aliasing -fomit-frame-pointer -ffast-math -Iinclude -Iopende/ode/src/joints/ -Iopende/GIMPACT -I$JAVA_INCLUDE/linux -I$JAVA_INCLUDE -DdTRIMESH_ENABLED -c -o ../bin/odejava_wrap.o ../generated/c++/odejava.cxx

g++ $CFLAGS -shared -fPIC -DHAVE_CONFIG_H -I../src/c -Iopende/include -O2 -fno-strict-aliasing -fomit-frame-pointer -ffast-math -Iinclude -Iopende/ode/src/joints/ -Iopende/GIMPACT -I$JAVA_INCLUDE/linux -I$JAVA_INCLUDE -DdTRIMESH_ENABLED -c -o ../bin/odejava.o ../src/c/odejava.cpp


g++ $CFLAGS -fPIC -dynamiclib `find opende/ode/src -name *.o` `find opende/GIMPACT/src -name *.o` ../bin/odejava_wrap.o ../bin/odejava.o -o ../bin/libodejava.jnilib

